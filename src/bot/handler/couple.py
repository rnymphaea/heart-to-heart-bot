from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.enums.parse_mode import ParseMode

from sqlalchemy.ext.asyncio import AsyncSession

from src.bot.keyboard.common import start_keyboard, cancel_keyboard
from src.bot.keyboard.couple import leave_couple_keyboard
import src.bot.storage.couple as database

from src.bot.state import NewCouple, Couple
from src.bot.handler.common import start_message

from src.bot.config import bot

couple_router = Router()


@couple_router.callback_query(F.data == "create_couple")
async def create_couple(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    token = await database.user_in_couple(session, callback.from_user.id)

    if not token:
        await state.set_state(NewCouple.waiting)
        couple = await database.create_couple(
            session=session,
            telegram_id=callback.from_user.id
        )

        kb = cancel_keyboard()
        await callback.message.edit_text(
            f"‚ú® –í–∞—à–∞ –ø–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"–í–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–∞–Ω–¥—É:\n"
            f"`{couple.token}`\n\n"
            f"–ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ!",
            reply_markup=kb,
            parse_mode=ParseMode.MARKDOWN,
        )
    else:
        kb = leave_couple_keyboard()
        await callback.message.edit_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä–∞.\n\n"
            f"–í–∞—à —Ç–æ–∫–µ–Ω:\n"
            f"`{token}`\n\n"
            f"–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ç–µ–∫—É—â–µ–π.",
            reply_markup=kb,
            parse_mode=ParseMode.MARKDOWN,
        )
    await callback.answer()

@couple_router.callback_query(F.data == "join_couple")
async def join_couple(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    token = await database.user_in_couple(session, callback.from_user.id)
    
    if token:
        kb = leave_couple_keyboard()
        await callback.message.edit_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä–∞.\n\n"
            f"–í–∞—à —Ç–æ–∫–µ–Ω:\n"
            f"`{token}`\n",
        reply_markup=kb,
        parse_mode=ParseMode.MARKDOWN)
    else:
        kb = cancel_keyboard()
        await state.set_state(NewCouple.joining)
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ–±—â–∏–ª –≤–∞–º –ø–∞—Ä—Ç–Ω—ë—Ä",
            reply_markup=kb,
        )
    await callback.answer()


@couple_router.message(NewCouple.joining)
async def process_join_token(message: Message, state: FSMContext, session: AsyncSession):
    token = message.text.strip()
    kb = cancel_keyboard()

    try:
        couple, partner_telegram_id = await database.join_couple(
            session=session,
            telegram_id=message.from_user.id,
            token=token
        )

        await message.answer(
            f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø–∞—Ä–µ!\n\n"
            f"–í–∞—à –ø–∞—Ä—Ç–Ω—ë—Ä —Ç–µ–ø–µ—Ä—å —Å –≤–∞–º–∏. –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! ‚ú®",
            reply_markup=kb,
            parse_mode=ParseMode.MARKDOWN,
        )

        await bot.send_message(
            chat_id=partner_telegram_id,
            text=f"üéâ –í–∞—à –ø–∞—Ä—Ç–Ω—ë—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –≤–º–µ—Å—Ç–µ. –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! ‚ú®",
            parse_mode=ParseMode.MARKDOWN,
        )

        await state.set_state(Couple.select_category)
        partner_state = FSMContext(storage=state.storage, key=("default", str(partner_telegram_id)))
        await partner_state.set_state(Couple.select_category)

    except ValueError as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {e}.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            reply_markup=kb,
        )


@couple_router.callback_query(F.data == "leave_couple")
async def leave_couple(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await state.clear()
    try:
        await database.leave_couple(session, callback.from_user.id)
        await callback.message.answer("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞—Ä—ã.")
    except ValueError:
        await callback.message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø–∞—Ä–µ.")
    finally:
        kb = start_keyboard()
        await callback.message.answer(
            text=start_message,
            reply_markup=kb,
        )
        await callback.message.delete()
    await callback.answer()


@couple_router.callback_query(F.data == "back_to_start")
async def back_to_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    kb = start_keyboard()
    await callback.message.edit_text(
        text=start_message,
        reply_markup=kb,
    )

